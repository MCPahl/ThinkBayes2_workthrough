{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1d34e2bd-1294-4dfc-a428-8f5a884bdc4f",
   "metadata": {},
   "source": [
    "# Minimum, Maximum, and Mixture\n",
    "\n",
    "How to work with distributions and combining distributions\n",
    "\n",
    "## Cumulative Distribution Fuctions (CDFs)\n",
    "\n",
    "Cumulative sum of PMF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b45d4027-ea68-4d73-a57e-d1da1c91738e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from empiricaldist import Pmf\n",
    "\n",
    "hypos = np.linspace(0, 1, 101)\n",
    "pmf = Pmf(1, hypos)\n",
    "data = 140, 250"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9f866883-a57c-486a-88dc-a3273434f082",
   "metadata": {},
   "outputs": [],
   "source": [
    "#update\n",
    "from scipy.stats import binom\n",
    "\n",
    "def update_binomial(pmf, data):\n",
    "    \"\"\"Update pmf using the binomial distribution.\"\"\"\n",
    "    k, n = data\n",
    "    xs = pmf.qs\n",
    "    likelihood = binom.pmf(k, n, xs)\n",
    "    pmf *= likelihood\n",
    "    pmf.normalize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cb559e63-da53-4a9e-a899-e0f98d390da8",
   "metadata": {},
   "outputs": [],
   "source": [
    "update_binomial(pmf, data)\n",
    "cumulative = pmf.cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3a9721af-557e-4672-a26c-e9a0e1caad55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cumulative.plot(label='CDF', color=\"blue\")\n",
    "pmf.plot(label='PMF', color=\"red\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f53bba3-c318-4a08-b8b6-3c02c8086ff5",
   "metadata": {},
   "source": [
    "CDF always ranges between 0 and 1. cumsum is a pandas series, so can use brackets to select elements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b70594c1-d1df-4f8a-8c67-1aaa613aa947",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9944829330756975"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cumulative[0.61]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70e1a04e-390d-4e8f-af1a-f84aa847682c",
   "metadata": {},
   "source": [
    "Value indicates the total probabilty of values less than or equal to 0.61\n",
    "Can go the other way with interpolation (probability to value)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "99765e23-1f26-4fa7-aee3-be395a65125c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(0.61)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Example of interpolation\n",
    "from scipy.interpolate import interp1d\n",
    "ps = cumulative.values\n",
    "qs = cumulative.index\n",
    "interp = interp1d(ps, qs)\n",
    "interp(0.9944829330756975)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9ef017ea-856a-4123-bf38-b3b310de5aef",
   "metadata": {},
   "outputs": [],
   "source": [
    "#empiracaldist has a class called Cdf\n",
    "#make_cdf uses np.cumsum to compute the cumulative sum of the probabilities.\n",
    "cdf = pmf.make_cdf()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b740b4f6-7f34-4cb8-808c-7562895f05d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9944829330756975"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#use bracket to get element\n",
    "cdf[0.61]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "817fc334-b243-4362-aa4f-76b382a5c8b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(0.6)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Values not in distribution will return error. Can use parenthesis to interpolate the value between the quanitites\n",
    "cdf.quantile(0.9638303)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dc40e0c0-7394-4cea-a0ae-45e62661ca86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.52, 0.6 ])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Also can compute credible intervals\n",
    "cdf.credible_interval(0.9)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7449dd8e-0b53-4ab9-aaeb-d34bbc5cc9e5",
   "metadata": {},
   "source": [
    "CDFs and PMFs can always be converted to the other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9ed51e08-563a-47a8-abc4-f585ce30c17f",
   "metadata": {},
   "outputs": [],
   "source": [
    "pmf = cdf.make_pmf()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8800d41e-f539-4754-9019-32ca23815976",
   "metadata": {},
   "source": [
    "CDFs are useful to quickly compute quantiles efficiently. Also useful for calculating a distribution min or max"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c7a557e-cd5e-41d0-b7d3-0e177afe07bb",
   "metadata": {},
   "source": [
    "## Best three of four\n",
    "\n",
    "In DND, characters have 6 attributes.  Strength, Intellegence, Wisdom, Dexterity, Constitution, and Charisma\n",
    "\n",
    "New characters roll 4 six sided dice for each attribute and add the best three dice. ie roll 1,2,3,4; you would have 4+3+2 = 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c0541029-03a6-4415-8a82-96f312eee4b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#helper functions\n",
    "def make_die(sides):\n",
    "    outcomes = np.arange(1, sides+1)\n",
    "    die = Pmf(1/sides, outcomes)\n",
    "    return die\n",
    "\n",
    "def add_dist_seq(seq):\n",
    "    \"\"\"Compute Pmf of the sum of values from seq.\"\"\"\n",
    "    total = seq[0]\n",
    "    for other in seq[1:]:\n",
    "        total = total.add_dist(other)\n",
    "    return total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b67ee272-9163-4621-956e-879fcb6cb6d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "die = make_die(6)\n",
    "dice = [die] * 3\n",
    "pmf_3d6 = add_dist_seq(dice)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "951e27a7-19a8-45ae-b061-e5d6627dc4bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pmf_3d6.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38bc5c50-87f7-4c32-a734-28230b1567dd",
   "metadata": {},
   "source": [
    "Rolling 4 die and picking the best three is a different distribution. First estimate by simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4dd442d5-b777-4561-b5ef-71c562a0ead8",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 10000\n",
    "a = np.random.randint(1, 7, size = (n, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "1d15674f-727e-4881-a89b-46cef1d18029",
   "metadata": {},
   "outputs": [],
   "source": [
    "#sort rows in ascending order\n",
    "a.sort(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9a5a88af-4216-4a5c-b4e5-9a141dde8283",
   "metadata": {},
   "outputs": [],
   "source": [
    "t = a[:, 1:].sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bb67a22c-82a5-42e5-a48e-d8039e7c0e1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "pmf_best3 = Pmf.from_seq(t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cb993689-c254-437d-882e-c856c50fd97f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pmf_3d6.plot(label='sum of 3 dice')\n",
    "pmf_best3.plot(label='best 3 of 4', ls='--')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0649c18b-f773-4aa0-b577-913a4e0fb93e",
   "metadata": {},
   "source": [
    "Choosing the best of three results will be on average higher than rolling three\n",
    "\n",
    "## Computing maximum of distribution\n",
    "\n",
    "Use the cumulative distribution funciton to compute max or min.\n",
    "\n",
    "For this example, given DND characters have 6 attributes (STR, DEX, CON, INT, WIS,CHR), what is the expected distribution of their best attribute?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "f46a5b67-00d5-4493-be82-b6d431dfc3b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#make cdf for best 3\n",
    "cdf_best3 = pmf_best3.make_cdf()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94689e80-aa5a-437e-ad45-d91230ca3e6a",
   "metadata": {},
   "source": [
    "Cdf(x) is the sum of probabilities less than or equal to x.  Or probability that a random value from the distribution is less than or equal to x.  Drawing 6 values, the probability of all of them being less than or equal to x is Cdf(x)^6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4bda0742-4a0a-4931-aaad-619289c3ffe1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.771561e-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6.321363e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.870415e-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.560963e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.535104e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.324853e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.535508e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3.279203e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3.246462e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1.751364e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>6.949620e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2.039161e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4.366253e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>7.126341e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>9.138647e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "3     1.771561e-18\n",
       "4     6.321363e-15\n",
       "5     1.870415e-12\n",
       "6     2.560963e-10\n",
       "7     2.535104e-08\n",
       "8     1.324853e-06\n",
       "9     2.535508e-05\n",
       "10    3.279203e-04\n",
       "11    3.246462e-03\n",
       "12    1.751364e-02\n",
       "13    6.949620e-02\n",
       "14    2.039161e-01\n",
       "15    4.366253e-01\n",
       "16    7.126341e-01\n",
       "17    9.138647e-01\n",
       "18    1.000000e+00\n",
       "Name: , dtype: float64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from empiricaldist import Cdf\n",
    "cdf_max6 = Cdf(cdf_best3**6)\n",
    "cdf_max6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d260916c-4090-4cbe-885b-228b02c86953",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#calculate pmf\n",
    "pmf_max6 = cdf_max6.make_pmf()\n",
    "pmf_max6.plot(label='max of 6 attributes')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b55a2bf4-2ca5-4e08-bcc4-7adc5eafc7c4",
   "metadata": {},
   "source": [
    "Most attributes will be greater than 12, and 10% will have a 18"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7b0d2ec1-a811-4213-9846-70412b56d834",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot cumulative distributions for \n",
    "#green sum of 3 dice\n",
    "#orange, best 3 of 4 dice\n",
    "#green max of 6 attributes\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "cdf_3d6 = pmf_3d6.make_cdf()\n",
    "cdf_3d6.plot(label='sum of 3 dice')\n",
    "\n",
    "cdf_best3 = pmf_best3.make_cdf()\n",
    "cdf_best3.plot(label='best 3 of 4 dice', ls='--')\n",
    "cdf_max6.plot(label='max of 6 attributes', ls=':')\n",
    "plt.ylabel('CDF');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "43c998fb-ec46-48cc-894d-b66bd24ea4a7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.771561e-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6.319591e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.864093e-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.542259e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.509494e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.299502e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.403022e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3.025652e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2.918542e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1.426718e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>5.198256e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.344199e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2.327092e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.760087e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2.012307e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8.613527e-02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "3     1.771561e-18\n",
       "4     6.319591e-15\n",
       "5     1.864093e-12\n",
       "6     2.542259e-10\n",
       "7     2.509494e-08\n",
       "8     1.299502e-06\n",
       "9     2.403022e-05\n",
       "10    3.025652e-04\n",
       "11    2.918542e-03\n",
       "12    1.426718e-02\n",
       "13    5.198256e-02\n",
       "14    1.344199e-01\n",
       "15    2.327092e-01\n",
       "16    2.760087e-01\n",
       "17    2.012307e-01\n",
       "18    8.613527e-02\n",
       "Name: , dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a19ea896-7d43-4e6b-ba57-db57c525030f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.771561e-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6.321363e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.870415e-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.560963e-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.535104e-08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.324853e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.535508e-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3.279203e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3.246462e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1.751364e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>6.949620e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2.039161e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4.366253e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>7.126341e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>9.138647e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "3     1.771561e-18\n",
       "4     6.321363e-15\n",
       "5     1.870415e-12\n",
       "6     2.560963e-10\n",
       "7     2.535104e-08\n",
       "8     1.324853e-06\n",
       "9     2.535508e-05\n",
       "10    3.279203e-04\n",
       "11    3.246462e-03\n",
       "12    1.751364e-02\n",
       "13    6.949620e-02\n",
       "14    2.039161e-01\n",
       "15    4.366253e-01\n",
       "16    7.126341e-01\n",
       "17    9.138647e-01\n",
       "18    1.000000e+00\n",
       "Name: , dtype: float64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#CDF provides a function called max_dist which can compute the Cdf of the maximum\n",
    "\n",
    "cdf_max_dist6 = cdf_best3.max_dist(6)\n",
    "cdf_max_dist6 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b84c5ee4-5d6e-4b11-ac68-c5abf1f91853",
   "metadata": {},
   "source": [
    "## Calculate minimum of distribution\n",
    "\n",
    "The minimum equals the maximum of the complementary CDF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "4b933de4-b3e3-4065-81f8-e22dbfed42bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "prob_gt = 1 - cdf_best3\n",
    "prob_gt6 = prob_gt**6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98d25749-2be2-49c0-80ac-a0f65fc39fab",
   "metadata": {},
   "source": [
    "If all 6 exceed x then their minimum exceeds x, so prob_gt6 is complementary CDF of the minimum. That means can take the complement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "6a51cd1b-3fd0-4669-a0cd-551ddf5bd58b",
   "metadata": {},
   "outputs": [],
   "source": [
    "prob_le6 = 1 - prob_gt6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c2061ec-667f-4592-81b8-c66cd4b56e06",
   "metadata": {},
   "source": [
    "Which yields a pandas series with the CDF of the minimum attribute of the 6."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "53f9164d-0fa8-418e-b42f-cafd53fdb87e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert to Cdf\n",
    "cdf_min6 = Cdf(prob_le6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "89f03e11-a70b-486c-ab0a-d4cdd9d1a024",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot min and max\n",
    "cdf_min6.plot(color='C4', label='minimum of 6')\n",
    "cdf_max6.plot(color='C2', label='maximum of 6', ls=':')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "cb586e19-6b55-448b-b2b8-0d0075b851e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.006582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.025524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.064779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.141988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.284193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.485340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.676354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.839225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.945788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.986091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.997866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.999841</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.999995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "3     0.006582\n",
       "4     0.025524\n",
       "5     0.064779\n",
       "6     0.141988\n",
       "7     0.284193\n",
       "8     0.485340\n",
       "9     0.676354\n",
       "10    0.839225\n",
       "11    0.945788\n",
       "12    0.986091\n",
       "13    0.997866\n",
       "14    0.999841\n",
       "15    0.999995\n",
       "16    1.000000\n",
       "17    1.000000\n",
       "18    1.000000\n",
       "Name: , dtype: float64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Cdf also has min_dist, which will perform the same computation\n",
    "cdf_min_dist6 = cdf_best3.min_dist(6)\n",
    "cdf_min_dist6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2a13adb-98f6-4ed0-b538-dbffd88d1c94",
   "metadata": {},
   "source": [
    "## Mixture of distributions\n",
    "\n",
    "Some distributions will be composed of other distributions\n",
    "\n",
    "For example: A DND character may use a knife and short sword, each round attack with one of the weapons at random, where the sword will cause 1d4 damage, while the dagger will cause 1d6 damage. To represent character's overall damage as a distribution, we will need to include all this info."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "c8de13cb-72c1-49af-bf0f-920e4e1b50b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Model two forms of damage\n",
    "d4 = make_die(4)\n",
    "d6 = make_die(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "3659a6aa-28eb-4e01-921d-95c993d3405b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.20833333333333331"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#compute probability that the character inflicts one point of damage\n",
    "prob_1 = (d4(1) + d6(1)) / 2\n",
    "prob_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "06743ca2-45a6-48e3-89c5-342f68d371e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08333333333333333"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#This would be the same value for 1-4, the odds for 5 and 6 will be different\n",
    "prob_6 = (d4(6) + d6(6)) / 2\n",
    "prob_6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "631a4da2-8199-420e-94e6-3e67ca2066e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#could perform loop but arrays are vectorized\n",
    "mix1 = (d4 + d6) / 2\n",
    "mix1.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "93d06ec5-8d66-4c85-837e-20188e7cac60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Example 2, fighting 3 monsters one can do 1d4, the other two can do 1d6. \n",
    "#Get hit at random by each, how much damage we expect\n",
    "\n",
    "mix2 = (d4 + 2*d6) / 3\n",
    "mix2.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f59c1cb-5c68-4874-ab30-ff2eeeb11ffd",
   "metadata": {},
   "source": [
    "Reminder, the + operator adds the probabilities for each outcome, which is different from the function Pmf.add_dist, which computes the distribution of the sum."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "45536b91-96b5-49c8-b855-797047bdade8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#get distribution of total damage done each round\n",
    "total_damage = Pmf.add_dist(mix1, mix2)\n",
    "total_damage.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25a7e8a7-0ae6-452f-9381-6a3e24c84eef",
   "metadata": {},
   "source": [
    "## General Mixtures\n",
    "\n",
    "Previous section showed an ad hoc way to compute mixtures.  A more general way would be using Pmfs and Cdfs.\n",
    "\n",
    "Example: 3 more monsters join combat after 10 rounds, each monster is equiped with a battle axe that does 1d8 damage.\n",
    "\n",
    "Now the monsters can inflict a mixture of either \n",
    "d4 (One), d6 (two), or  d8 (three)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "bc7243cc-e9a2-4e68-b2a5-145cccdaaa4f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "4    0.166667\n",
       "6    0.333333\n",
       "8    0.500000\n",
       "Name: , dtype: float64"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Represent monster as a Pmf\n",
    "hypos = [4,6,8]\n",
    "counts = [1,2,3]\n",
    "pmf_dice = Pmf(counts, hypos)\n",
    "pmf_dice.normalize()\n",
    "pmf_dice"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88cdd95c-661f-45e3-992d-eb56e88c6972",
   "metadata": {},
   "source": [
    "This represents the probility of monster with dagger (4), sword (6), or battle axe (8) attacking."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "90de79ce-f8d3-4611-b649-804a1881925f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         1         2         3         4         5         6      7      8\n",
       "  0.250000  0.250000  0.250000  0.250000       NaN       NaN    NaN    NaN\n",
       "  0.166667  0.166667  0.166667  0.166667  0.166667  0.166667    NaN    NaN\n",
       "  0.125000  0.125000  0.125000  0.125000  0.125000  0.125000  0.125  0.125"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Next make a sequence of Pmf objects to represent the dice\n",
    "import pandas as pd\n",
    "dice = [make_die(sides) for sides in hypos]\n",
    "pd.DataFrame(dice)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "7b21ec05-5f61-4b21-943f-2ad982178c9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.25</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        \n",
       "1  0.25  0.166667  0.125\n",
       "2  0.25  0.166667  0.125\n",
       "3  0.25  0.166667  0.125\n",
       "4  0.25  0.166667  0.125\n",
       "5  0.00  0.166667  0.125\n",
       "6  0.00  0.166667  0.125\n",
       "7  0.00  0.000000  0.125\n",
       "8  0.00  0.000000  0.125"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Replace missing values with 0\n",
    "df = pd.DataFrame(dice).fillna(0).transpose()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "8c0315c9-4dbc-4fbe-bd98-81612bf7bcf7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    0.541667\n",
       "2    0.541667\n",
       "3    0.541667\n",
       "4    0.541667\n",
       "5    0.291667\n",
       "6    0.291667\n",
       "7    0.125000\n",
       "8    0.125000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Add the weighted distribution, axis=1 is across rows\n",
    "df.sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "0576c01f-73e2-4b2b-bc5c-2eab6aeff77e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define function to make a weighted mixture of distributions\n",
    "\n",
    "def make_mixture(pmf, pmf_seq):\n",
    "    \"\"\"Make a mixture of distributions.\"\"\"\n",
    "    df = pd.DataFrame(pmf_seq).fillna(0).transpose()\n",
    "    df *= np.array(pmf)\n",
    "    total = df.sum(axis=1)\n",
    "    return Pmf(total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "1f716c54-6d42-4a72-910e-09c142f43bf6",
   "metadata": {},
   "outputs": [],
   "source": [
    "mix = make_mixture(pmf_dice, dice)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "a8f64bc6-e73f-45a9-b76b-3ca2e9bf7d7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mix.bar()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0dd6bea-e29b-4819-af43-daea12725378",
   "metadata": {},
   "source": [
    "# Excercises\n",
    "\n",
    "### Excercise 1\n",
    "In DND an alternative system to generate ability scores for a character is to use a standard array. This is 15,14,13,12,10,8.  Is it better to use the standard array or roll dice (best 3 out of 4).\n",
    "\n",
    "- Which method has a higher mean?\n",
    "- Which method has a higher Standard Deviation?\n",
    "- The lowest value in the array is 8, what is the chance of getting lower than an 8 by rolling?\n",
    "- The highest value on the standard array is 15. By rolling, what is the probability of getting a value greater than 15?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "85aef568-15a9-47e9-a2b7-baf439cc1730",
   "metadata": {},
   "outputs": [],
   "source": [
    "#CDF for standard array\n",
    "standard = [15,14,13,12,10,8]\n",
    "cdf_standard = Cdf.from_seq(standard)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "f33dde72-0e9a-49d9-bd8e-52944481fd89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot, standard as a step to show there are only a few values\n",
    "cdf_best3.plot(color='C1', ls='--')\n",
    "cdf_standard.step(label='standard set', color='C7')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "e676dd53-873c-4e8d-b386-9a56b05e5f93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12.2613, 12.0)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Compare means\n",
    "cdf_best3.mean(), cdf_standard.mean()\n",
    "#Best of 3 is slight higher mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "e99d0c18-8917-47e9-811f-e4a2f11d7969",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2.8247517253733996, 2.3804761428476167)"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Compare STD\n",
    "cdf_best3.std(), cdf_standard.std()\n",
    "#Best of three has higher standard deviation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f1326941-2751-4162-8b90-df409e96b61a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0542"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Probability that an attribute of distribution is less than 8\n",
    "cdf_best3.lt_dist(8)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "c74b1084-9d27-40d4-abd2-d2786325d0b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.129"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Probability a score is greater than 15\n",
    "cdf_best3.gt_dist(15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "9ab85289-0377-43b5-9e9f-44d482fd1d17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2841931368652155"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Probability at least one attribute is less than 8\n",
    "cdf_min6.lt_dist(8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "eea3c771-f3e7-41ee-933a-f81c7522c5e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5633746668212313"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Probability at least one attribute is greater than 15\n",
    "cdf_max6.gt_dist(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00f0f3e3-a9c5-4783-8bd8-737e7a307803",
   "metadata": {},
   "source": [
    "### Exercise 2\n",
    "Suppose your DND character is fighting 3 monsters.\n",
    "\n",
    "- One with short sword (1d6)\n",
    "- One with battle axe (1d8)\n",
    "- One with bastard sword (1d10)\n",
    "\n",
    "One monster attacked you and did 1 point of damage.  Which monster do you think it was, compute the posterior probability.  If the same monster attacked again, what is the probability you will suffer 6 points of damage?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "45831641-0319-4801-b499-850bdc360a24",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.425532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.319149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.255319</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "6     0.425532\n",
       "8     0.319149\n",
       "10    0.255319\n",
       "Name: , dtype: float64"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Set model for monster that attacked, assume each monster is equally likely in prior\n",
    "hypos = [6,8, 10]\n",
    "prior = Pmf(1, hypos)\n",
    "likelihood = 1/prior.qs\n",
    "posterior = prior * likelihood\n",
    "posterior.normalize()\n",
    "posterior\n",
    "#most likely a sword"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "aa3bac86-4ef1-4793-97c5-a7de666990bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Set dice\n",
    "d6 = make_die(6)\n",
    "d8 = make_die(8)\n",
    "d10 = make_die(10)\n",
    "dice = d6, d8, d10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "e348fc07-927a-44bb-b412-0839f9eb5792",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Damage \n",
    "damage = make_mixture(posterior, dice)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "f950cd74-d5dd-4e5b-bc7c-c00395901ffd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.13634751773049647"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#pull odds of rolling 6\n",
    "damage[6]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77b45876-b763-4b1b-bc95-331976043d7c",
   "metadata": {},
   "source": [
    "### Example 3 Poincare's bread\n",
    "\n",
    "A mathmatician weighs bread advertized to be 1kg every day for a year.  He calculates the mean to be 950g and standard dev of 50g.  He takes this to the bread police and the baker is fined.  \n",
    "\n",
    "He goes to the baker and now gets bread that is 1kg as expected, but he still complains to the bread police. He claims the distribution is asymmetric, suggesting that the baker was delibrately giving him heavier loafs.\n",
    "\n",
    "Is this reasonable? Assume the baker sees the mathmatician coming and quickly heaves a few loafs of bread."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "6bdad89a-404f-498c-81da-d2761952cdc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generate random distribution\n",
    "mean = 950\n",
    "std = 50\n",
    "\n",
    "np.random.seed(476)\n",
    "sample = np.random.normal(mean, std, size=365)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "4b38b7e1-7151-4e3f-86c7-d8fe932b67f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 977.8417348915588\n",
      "3 990.9611259751002\n",
      "4 999.585980673208\n",
      "5 1005.9242577504419\n"
     ]
    }
   ],
   "source": [
    "cdf = Cdf.from_seq(sample)\n",
    "for n in range(2,6):\n",
    "    cdf_max = cdf.max_dist(n)\n",
    "    print(n, cdf_max.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "d8ecbf5d-e9ac-46ed-8b7f-df8838de6298",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Grabbing 1  heaviestout of 4 loafs will get the distribution over 1kg\n",
    "cdf.plot(label='one loaf')\n",
    "cdf.max_dist(4).plot(label='maximum of four loaves')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9f22d1e-548f-4623-b10c-702d2a93b666",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
